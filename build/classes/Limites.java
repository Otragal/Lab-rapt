
import java.awt.Image;
import javax.swing.ImageIcon;

public class Limites {

    //Tamamnho]
    int sx;
    int sy;
    //Ativo
    boolean ativo;
    //Posição
    int x;
    int y;
    int area[][] = new int[17][17];

    //Imagem
    ImageIcon parede = new ImageIcon("Parede.png");
    Image pd = parede.getImage();
    

    //Método para definir o objeto
    public Limites() {
        this.x = 32;
        this.y = 32;
        
    }
    public int[][] matriz(){
        this.area = randon();
        return area;
    }
    
    public int[][] randon(){
        int r = (int) Math.random()*8;
        int m[][] = new int[17][17];
        
            m[0][0]=1; m[0][1]=1; m[0][2]=1; m[0][3]=1; m[0][4]=1; m[0][5]=4; m[0][6]=4; m[0][7]=4; m[0][8]=4; m[0][9]=4; m[0][9]=4; m[0][10]=4; m[0][11]=4; m[0][12]=4; m[0][13]=4; m[0][14]=4; m[0][15]=4; m[0][16]=1;
            m[1][0]=1; m[1][1]=1; m[1][2]=1; m[1][3]=1; m[1][4]=1; m[1][5]=0; m[1][6]=0; m[1][7]=0; m[1][8]=0; m[1][9]=0; m[1][9]=3; m[1][10]=0; m[1][11]=0; m[1][12]=0; m[1][13]=3; m[1][14]=0; m[1][15]=0; m[1][16]=1;
            m[2][0]=1; m[2][1]=1; m[2][2]=4; m[2][3]=4; m[2][4]=4; m[2][5]=0; m[2][6]=4; m[2][7]=4; m[2][8]=4; m[2][9]=4; m[2][9]=0; m[2][10]=4; m[2][11]=4; m[2][12]=4; m[2][13]=0; m[2][14]=4; m[2][15]=0; m[2][16]=1;
            m[3][0]=1; m[3][1]=1; m[3][2]=0; m[3][3]=0; m[3][4]=0; m[3][5]=3; m[3][6]=0; m[3][7]=3; m[3][8]=0; m[3][9]=0; m[3][9]=3; m[3][10]=0; m[3][11]=0; m[3][12]=0; m[3][13]=3; m[3][14]=0; m[3][15]=3; m[3][16]=1;
            m[4][0]=1; m[4][1]=1; m[4][2]=0; m[4][3]=1; m[4][4]=1; m[4][5]=0; m[4][6]=4; m[4][7]=0; m[4][8]=4; m[4][9]=4; m[4][9]=0; m[4][10]=4; m[4][11]=4; m[4][12]=4; m[4][13]=4; m[4][14]=4; m[4][15]=0; m[4][16]=1;
            m[5][0]=1; m[5][1]=1; m[5][2]=0; m[5][3]=1; m[5][4]=1; m[5][5]=3; m[5][6]=0; m[5][7]=3; m[5][8]=0; m[5][9]=0; m[5][9]=3; m[5][10]=0; m[5][11]=0; m[5][12]=3; m[5][13]=0; m[5][14]=0; m[5][15]=3; m[5][16]=1;
            m[6][0]=1; m[6][1]=1; m[6][2]=0; m[6][3]=4; m[6][4]=4; m[6][5]=0; m[6][6]=1; m[6][7]=1; m[6][8]=1; m[6][9]=1; m[6][9]=0; m[6][10]=1; m[6][11]=1; m[6][12]=0; m[6][13]=1; m[6][14]=1; m[6][15]=0; m[6][16]=1;
            m[7][0]=1; m[7][1]=1; m[7][2]=3; m[7][3]=0; m[7][4]=0; m[7][5]=3; m[7][6]=1; m[7][7]=1; m[7][8]=1; m[7][9]=1; m[7][9]=0; m[7][10]=1; m[7][11]=1; m[7][12]=0; m[7][13]=1; m[7][14]=1; m[7][15]=0; m[7][16]=1;
            m[8][0]=1; m[8][1]=1; m[8][2]=0; m[8][3]=1; m[8][4]=1; m[8][5]=0; m[8][6]=1; m[8][7]=1; m[8][8]=1; m[8][9]=1; m[8][9]=0; m[8][10]=1; m[8][11]=1; m[8][12]=0; m[8][13]=1; m[8][14]=1; m[8][15]=0; m[8][16]=1;
            m[9][0]=1; m[9][1]=1; m[9][2]=0; m[9][3]=1; m[9][4]=1; m[9][5]=0; m[9][6]=4; m[9][7]=4; m[9][8]=4; m[9][9]=4; m[9][9]=0; m[9][10]=4; m[9][11]=4; m[9][12]=0; m[9][13]=4; m[9][14]=4; m[9][15]=0; m[9][16]=1;
            m[10][0]=1; m[10][1]=4; m[10][2]=0; m[10][3]=4; m[10][4]=4; m[10][5]=3; m[10][6]=0; m[10][7]=0; m[10][8]=0; m[10][9]=3; m[10][10]=0; m[10][11]=0; m[10][12]=3; m[10][13]=0; m[10][14]=0; m[10][15]=0; m[10][16]=1;
            m[11][0]=1; m[11][1]=0; m[11][2]=3; m[11][3]=3; m[11][4]=0; m[11][5]=3; m[11][6]=1; m[11][7]=1; m[11][8]=1; m[11][9]=0; m[11][10]=1; m[11][11]=1; m[11][12]=1; m[11][13]=1; m[11][14]=1; m[11][15]=1; m[11][16]=1;
            m[12][0]=1; m[12][1]=0; m[12][2]=4; m[12][3]=0; m[12][4]=4; m[12][5]=0; m[12][6]=4; m[12][7]=4; m[12][8]=4; m[12][9]=0; m[12][10]=1; m[12][11]=1; m[12][12]=1; m[12][13]=1; m[12][14]=1; m[12][15]=1; m[12][16]=1;
            m[13][0]=1; m[13][1]=3; m[13][2]=0; m[13][3]=3; m[13][4]=0; m[13][5]=3; m[13][6]=0; m[13][7]=0; m[13][8]=0; m[13][9]=0; m[13][10]=1; m[13][11]=1; m[13][12]=1; m[13][13]=1; m[13][14]=1; m[13][15]=1; m[13][16]=1;
            m[14][0]=1; m[14][1]=0; m[14][2]=4; m[14][3]=0; m[14][4]=4; m[14][5]=0; m[14][6]=1; m[14][7]=1; m[14][8]=1; m[14][9]=1; m[14][10]=1; m[14][11]=1; m[14][12]=1; m[14][13]=1; m[14][14]=1; m[14][15]=1; m[14][16]=1;
            m[15][0]=1; m[15][1]=5; m[15][2]=0; m[15][3]=3; m[15][4]=0; m[15][5]=0; m[15][6]=1; m[15][7]=1; m[15][8]=1; m[15][9]=1; m[15][10]=1; m[15][11]=1; m[15][12]=1; m[15][13]=1; m[15][14]=1; m[15][15]=1; m[15][16]=1;
            m[16][0]=1; m[16][1]=1; m[16][2]=1; m[16][3]=1; m[16][4]=1; m[16][5]=1; m[16][6]=1; m[16][7]=1; m[16][8]=1; m[16][9]=1; m[16][10]=1; m[16][11]=1; m[16][12]=1; m[16][13]=1; m[16][14]=1; m[16][15]=1; m[16][16]=1;
        
    return m;
    }
    
    
}


